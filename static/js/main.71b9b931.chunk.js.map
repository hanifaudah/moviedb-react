{"version":3,"sources":["components/Nav.js","components/MovieItem.js","components/MovieList.js","App.js","serviceWorker.js","index.js"],"names":["Nav","state","query","onSubmit","e","preventDefault","props","changeQuery","setState","onChange","target","value","Fragment","className","this","id","type","placeholder","Component","MovieItem","movie","style","movieItemStyle","alt","src","poster_path","marginTop","title","release_date","margin","padding","borderRadius","border","width","textAlign","Movies","movies","map","key","App","q","console","log","axios","get","then","res","data","results","MovieList","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2SA8BeA,EA5Bf,2MAEIC,MAAQ,CACJC,MAAM,IAHd,EAMIC,SAAW,SAACC,GACRA,EAAEC,iBACF,EAAKC,MAAMC,YAAY,EAAKN,MAAMC,OAClC,EAAKM,SAAS,CAACN,MAAM,MAT7B,EAYIO,SAAW,SAACL,GAAD,OAAO,EAAKI,SAAS,CAACN,MAAOE,EAAEM,OAAOC,SAZrD,wEAcQ,OACI,kBAAC,IAAMC,SAAP,KACI,yBAAKC,UAAU,gCACX,uCACA,0BAAMV,SAAUW,KAAKX,SAAUU,UAAU,eACrC,2BAAOF,MAAOG,KAAKb,MAAMC,MAAOO,SAAUK,KAAKL,SAAUM,GAAG,SAASF,UAAU,uBAAuBG,KAAK,SAASC,YAAY,WAChI,4BAAQJ,UAAU,uCAAuCG,KAAK,UAA9D,iBApBxB,GAAyBE,aCCZC,G,MAAb,iLACc,IACCC,EAASN,KAAKR,MAAdc,MACP,OACI,yBAAKP,UAAU,wCAAwCQ,MAAOC,GAC1D,yBAAKC,IAAI,GAAGC,IAAK,iCAAmCJ,EAAMK,cAC1D,wBAAIJ,MAAO,CAACK,UAAU,QAASN,EAAMO,OACrC,2BAAIP,EAAMQ,cACV,4BAAQf,UAAU,cAAlB,gBARhB,GAA+BK,cAczBI,EAAiB,CACnBO,OAAO,MACPC,QAAQ,MACRC,aAAc,OACdC,OAAO,iBACPC,MAAM,OACNC,UAAU,UAGCf,ICXAgB,EAZf,iLAEQ,OACI,yBAAKtB,UAAU,2CACVC,KAAKR,MAAM8B,OAAOC,KAAI,SAACjB,GAAD,OACnB,kBAAC,EAAD,CAAWkB,IAAKlB,EAAML,GAAIK,MAAOA,YALrD,GAA4BF,aCmCbqB,G,MA9Bf,2MACEtC,MAAQ,CACNmC,OAAQ,GACRlC,MAAM,IAHV,EAeEK,YAAc,SAACiC,GACb,EAAKhC,SAAS,CAACN,MAAM,2FAA4FsC,IACjHC,QAAQC,IAAI,EAAKzC,MAAMC,QAjB3B,mFAUuB,IAAD,OAClByC,IAAMC,IAAI,qGACTC,MAAK,SAAAC,GAAG,OAAI,EAAKtC,SAAS,CAAC4B,OAAQU,EAAIC,KAAKC,eAZjD,+BAqBI,OACE,6BACE,kBAAC,EAAD,CAAKzC,YAAaO,KAAKP,cACvB,kBAAC0C,EAAD,CAAWb,OAAQtB,KAAKb,MAAMmC,cAxBtC,GAAyBlB,cCILgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhB,MAAK,SAAAiB,GACjCA,EAAaC,kB","file":"static/js/main.71b9b931.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport class Nav extends Component {\r\n\r\n    state = {\r\n        query:\"\"\r\n    }\r\n\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.changeQuery(this.state.query);\r\n        this.setState({query:\"\"});\r\n    }\r\n    \r\n    onChange = (e) => this.setState({query: e.target.value});\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <nav className=\"navbar navbar-light bg-light\">\r\n                    <h3>MovieDB</h3>\r\n                    <form onSubmit={this.onSubmit} className=\"form-inline\">\r\n                        <input value={this.state.query} onChange={this.onChange} id=\"search\" className=\"form-control mr-sm-2\" type=\"search\" placeholder=\"Search\"></input>\r\n                        <button className=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\">Search</button>\r\n                    </form>\r\n                </nav>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Nav\r\n","import React, { Component } from 'react'\r\nimport '../App.css';\r\n\r\nexport class MovieItem extends Component {\r\n    render() {\r\n        const {movie} = this.props\r\n        return (\r\n            <div className=\"d-flex flex-column align-items-center\" style={movieItemStyle}>\r\n                <img alt=\"\" src={\"http://image.tmdb.org/t/p/w200\" + movie.poster_path}></img>\r\n                <h4 style={{marginTop:\"1em\"}}>{movie.title}</h4>\r\n                <p>{movie.release_date}</p>\r\n                <button className=\"btnDefault\">Details</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst movieItemStyle = {\r\n    margin:\"1em\",\r\n    padding:\"1em\",\r\n    borderRadius: \"15px\",\r\n    border:\"2px solid grey\",\r\n    width:\"15em\",\r\n    textAlign:\"center\"\r\n}\r\n\r\nexport default MovieItem\r\n","import React, { Component } from 'react'\r\nimport MovieItem from \"./MovieItem.js\"\r\n\r\nexport class Movies extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"d-flex flex-wrap justify-content-center\">\r\n                {this.props.movies.map((movie)=>(\r\n                    <MovieItem key={movie.id} movie={movie}/>\r\n                ))}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Movies\r\n","import React, { Component } from 'react'\nimport axios from 'axios';\nimport Nav from \"./components/Nav.js\"\nimport MovieList from \"./components/MovieList.js\"\n\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nexport class App extends Component {\n  state = {\n    movies: [],\n    query:\"\"\n  }\n\n  // componentDidUpdate() {\n  //   axios.get(this.state.query)\n  //   .then(res => this.setState({movies: res.data.results}))\n  // }\n  componentDidMount() {\n    axios.get(\"http://api.themoviedb.org/3/search/movie?api_key=95368f360e3dc457d2f213e11967e205&query=spiderman\")\n    .then(res => this.setState({movies: res.data.results}))\n  }\n\n  changeQuery = (q) => {\n    this.setState({query:\"http://api.themoviedb.org/3/search/movie?api_key=95368f360e3dc457d2f213e11967e205&query=\"+ q});\n    console.log(this.state.query);\n  }\n\n  render() {\n    return (\n      <div>\n        <Nav changeQuery={this.changeQuery}/>\n        <MovieList movies={this.state.movies}/>\n      </div>\n    )\n  }\n}\n\nexport default App\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}